[ 문제 ]
정리 되기 전 창고 문자열 리스트 = storage
각 물건의 개수가 담긴 정수 리스트 = num

//==========================================================================

[ 풀이 ]
// 가장 간단하게 아래 케이스라고 생각해 봤음.
// storage=["pencil"] / num = [2]

'''
1. 정리된 창고 배열로 쓸 clean_storage, clean_num 준비
  String[] clean_storage = new String[1];
  int[] clean_num = new int[1];

2. 7라인 for문 진입 for(int i=0; i<1; i++)
  : for문을 처음 들어왔을 때에는 num_item = 0이기 때문에 9라인 for문을 그냥 지나침.
  -> 그럼 clean_idx = -1인 상태이므로 15라인 if문 실행.
    : clean_storage[0] = Integer.toString(num[0]);       // clean_storage[0] = "2" , But 왜 정수를 문자화 해서 저장한 건지...?
      clean_num[0] = num[0];                            // clean_num[0] = 2
      num_item += 1;                                   // num_item = 1

3. 7라인 for문이 끝났으니 27라인으로 내려옴.
  : 29라인 ~ 34라인
    for(int i=0; i<1; i++) 실행 결과 num_max = 2, answer = "2"
    
4. 10라인 clean_storage[i]에서 Integer.toString(num[i]) 때문에 최종 "pencil"이 아닌 "2"가 리턴되고 있음.
  ∴ storage[i]로 수정하여 항목명이 리턴되도록 함.
  '''

[ + ]
// 배열이 2개 이상인 케이스부터는 9라인 for문을 통해 clean_storage에 담겨있는 이전 항목들과 현재 storage 항목을 비교해 같은 게 있는 지 판단하게 됨.
// 같은 항목이 있다면 15라인 if문 else가 실행되어 겹친 항목의 clean_num[clean_idx] 값을 num[i] 값 만큼 증가시킨다.

//==========================================================================

[ 답안 ]
if(clean_idx == -1){
                clean_storage[num_item] = storage[i]; // 수정 라인
                clean_num[num_item] = num[i];
                num_item += 1;
            }
