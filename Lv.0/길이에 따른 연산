[ 문제 ]
'''
정수가 담긴 리스트 num_list가 주어질 때, 리스트의 길이가 11 이상이면 리스트에 있는 모든 원소의 합을 
10 이하이면 모든 원소의 곱을 return하도록 solution 함수를 완성해주세요.
'''
//=====================================================================

[ 내 풀이 ]
// 풀긴 풀었는데 오합지졸인 것 같아 불편....
import java.util.Arrays;
class Solution {
    public int solution(int[] num_list) {
        int multi = 1;
        
        // 배열, 리스트에는 sum()이 없음. 스트림 전용 메서드.
        for(int num : num_list) {
            if(num_list.length >= 11)
                return Arrays.stream(num_list).sum();
            else
                multi *= num; // 전체 곱하는 메서드는 없음.
        }
        return multi;
    }
}
//=====================================================================

[ 타 풀이 1 ]
// 선언을 삼항연산자로 할 생각을 못 했다!! 
int answer = (num_list.length < 11 ? 1 : 0);

for(int i=0; i<num_list.length; i++){
    if(num_list.length < 11) {
        answer *= num_list[i];
    }else{
        answer += num_list[i];
    }
}
return answer;

[ 타 풀이 2 ]
// 처음으로 IntStream.of() 쓴 풀이 등장! 이 풀이도 메서드를 쓰기 위해 스트림화.
import java.util.stream.IntStream;
class Solution {
    public int solution(int[] num_list) {
        IntStream stream = IntStream.of(num_list);
        return num_list.length>10 ? stream.sum() : stream.reduce(1, (a, b) -> a * b);
    }
}
// reduce(1, (a, b) -> a * b: 1=초기값, a=누적값 담는 그릇, b=현재값 들어오는 그릇
// 즉, 처음엔 a에 1이 담기고 b는 비어있는 거임.
//=====================================================================

[ 메모 ]
1. sum()은 있어도 전체 곱하는 메서드는 없음. 따라서 타 풀이 2처럼 reduce()로 직접 구현해야 함.
  그러면서 sum()도 내부적으로 reduce() 기반이라고 하는데, 이 reduce()가 뭐길래?
  찾아보니 두 달 전 다른 문제에서 나왔었다.
  (작동 방식은 '원소들의 곱과 합' 메모에 자세히 써두었으니 이걸 다시 읽어보기.)

  reduce()는 이름 그대로 '스트림 요소들을 하나로 줄여나가는' 메서드임!
  즉, 곱셈만 하는 메서드가 아니라 그냥 내가 지정한 연산자를 누적 계산하여 하나의 값을 내는 것.

2. Stream도 객체임. String str = "Hello";와 같은 맥락.
  거듭 쓰지만, 배열/리스트는 그저 '데이터를 저장하는' 구조인 거라면, 스트림은 '데이터를 읽고 가공하는 흐름'!

[ 메모 ]
1. 
