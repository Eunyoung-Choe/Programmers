[ 문제 ]
'''
정수 n과 k가 주어졌을 때, 1 이상 n이하의 정수 중에서 k의 배수를 
오름차순으로 저장한 배열을 return 하는 solution 함수를 완성해 주세요.
'''
//=====================================================================

[ 내 풀이 ]
import java.util.*;
class Solution {
    public int[] solution(int n, int k) {
        List<Integer> list = new ArrayList<>();

        for(int i=1; i*k<=n; i++)
            list.add(k*i);
        
        return list.stream().mapToInt(Integer::intValue).toArray();
        // 이것도 오랜만에 하니까 변환을 까먹음.
    }
}
//=====================================================================

[ 타 풀이 1 ]
int count = n / k;
int[] answer = new int[count]; // 먼저 배열 크기 지정

for (int i = 1; i <= count; i++) {
    answer[i - 1] = k * i;
}
return answer;

[ 타 풀이 2 ]
return IntStream.rangeClosed(1, n).filter(i -> i % k == 0).toArray();
//=====================================================================

[ 메모 ]
1. 내 풀이에서 ArrayList<Integer> list = new ArrayList<>();라고 써도 같은 풀이이지만, 유연성 차이가 있다고 함.
  좌변은 인터페이스, 우변은 구현체. 
  즉 '리스트'라는 추상적인 타입으로 변수를 선언한 뒤, 실제 구현제를 ArrayList로 할당한 거임.
  list = new LinkedList<>(); 이런 게 가능.

2. IntStream.rangeClosed() // 연속된 정수 스트림 생성
  .filter()  // 조건에 맞는 원소만 걸러냄.
  .toArray() // 걸러진 스트림을 int 배열로 변환
