[ 문제 ]
'''
정수 배열 arr와 query가 주어집니다.
query를 순회하면서 다음 작업을 반복합니다.
짝수 인덱스에서는 arr에서 query[i]번 인덱스를 제외하고 배열의 query[i]번 인덱스 뒷부분을 잘라서 버립니다.
홀수 인덱스에서는 arr에서 query[i]번 인덱스는 제외하고 배열의 query[i]번 인덱스 앞부분을 잘라서 버립니다.
위 작업을 마친 후 남은 arr의 부분 배열을 return 하는 solution 함수를 완성해 주세요.
arr	                  query	      result
[0, 1, 2, 3, 4, 5]	  [4, 1, 2]	  [1, 2, 3]
'''
//=====================================================================

[ 내 풀이 ]
import java.util.*;
class Solution {
    public int[] solution(int[] arr, int[] query) {
        List<Integer> list = new ArrayList<>(); // 빈 리스트 생성
        
        for(int num : arr) {
            list.add(num); // 오토박싱 자동 적용
        }
        
        // subList만 쓰고 list에 다시 안 담아서 원본 그대로 출력되는 거였음.
        for(int i=0; i<query.length; i++) {
            if(i % 2 == 0)
                list = new ArrayList<>(list.subList(0, query[i]+1));
            else
                list = new ArrayList<>(list.subList(query[i], list.size())); // size에 () 붙여야 함.
        }
        
        return list.stream().mapToInt(Integer::intValue).toArray();
    }
}
//=====================================================================

[ 타 풀이 ]
// 실시간으로 배열을 자르는 게 아닌 두 포인터를 지정해 좁혀나감!
// 근데 이해가 안 감;;
int start = 0;
int end = arr.length - 1;

for (int i = 0; i < query.length; i++) {
    if (i % 2 == 0) {
        end = start + query[i] - 1;
    } else {
        start += query[i];
    }
}
return Arrays.copyOfRange(arr, start, end + 2);
//=====================================================================

[ 메모 ]
1. 배열을 자르는 것도 원본 크기가 변경되는 셈이니 원본 그 자체를 자르는 메서드는 없음.

2. 리스트에 ArrayList<>(arr)처럼 바로 배열 못 넣음. 
  빈 리스트에 for문으로 요소를 넣든가, 스트림을 쓰던가.
  List<Integer> list = Arrays.stream(arr)  // IntStream
                             .boxed()      // int → Integer
                             .collect(Collectors.toList());

3. subList(): 리스트의 특정 범위 view를 반환하는 메서드라 단순 이것만 쓰면 원본 배열에는 영향이 안 감.
  그래서 list = 처럼 원본에 다시 담아야 함.
