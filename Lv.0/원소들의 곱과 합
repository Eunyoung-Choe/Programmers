[ 문제 ]
'''
정수가 담긴 리스트 num_list가 주어질 때, 모든 원소들의 곱이 
모든 원소들의 합의 제곱보다 작으면 1을 크면 0을 return하도록 solution 함수를 완성해주세요.
'''
//=====================================================================

[ 내 풀이 ]
import java.util.*; // 이거 안 써서 오류 났었음.

class Solution {
    public int solution(int[] num_list) {
        int answer = 0;
        int multi = 1;
                    
        for(int i=0; i<num_list.length; i++) {
            multi *= num_list[i];
        }
        answer = multi < (int)Math.pow(Arrays.stream(num_list).sum(), 2) ? 1 : 0;
        
        return answer;
    }
}
// Math.pow((밑,지수): 제곱하는 메서드
// 반환은 double이라서 (int)로 형변환을 해야 했음.
// Arrays.stream(num_list).sum()은 int[] num_list를 IntStream으로 바꿔서 합을 구한 것.
//=====================================================================

[ 타 풀이 1 ]
public int solution(int[] num_list) {
      int answer = 0;
      int sum  = 0;
      int mult = 1;

      for(int i : num_list) { // for문 조건을 이렇게 써도 된다는 점!
          sum += i;
          mult *= i;
      }
      answer = Math.pow(sum,2) > mult ? 1 : 0;
      return answer;
  }

[ 타 풀이 2 ]
class Solution {
    public int solution(int[] num_list) {
        int sum = Arrays.stream(num_list).reduce(Integer::sum).getAsInt();
        int product = Arrays.stream(num_list).reduce((i,j)->i*j).getAsInt(); // 위아래 같은 표현 
        return product < sum*sum ? 1 : 0;
    }
}
// reduce(누적값, 현재값): Stream 요소들을 하나로 합치는 연산
// Integer::sum은 모든 원소를 더하겠다는 것. 람다식으로 풀어쓴 게 다음 줄임.
// reduce()의 반환 타입은 OptionalInt라고 함. (값이 없을 수도 있어서)
//=====================================================================

[ 메모 ]
1. 처음에 다른 문제에서 Stream 썼던 게 기억나 IntStream.range(0,num_list.length).sum()을 썼는데 이건 0,1,2... 인덱스 값의 합을 구하는 거라 X.
  
  Arrays.stream(): 배열을 Stream으로 변환해주는 라이브러리.
  자바의 Stream은 데이터의 흐름을 다루는 API로, 반복문 없이도 map, filter, sum, collect 같은 연산을 체인처럼 연결할 수 있음.
  Arrays.stream()은 배열을 그 스트림 형태로 바꿔주는 것. 
  Arrays.stream(num_list)는 IntStream타입이라는 소리.

2. OptionalInt: int타입 값이 있을 수도, 없을 수도 있는 객체
  Stream API에서 .reduce()와 같은 연산은 빈 스트림일 때 값이 없을 수 있어서 바로 int를 반환하지 않고 OptionalInt로 감싸서 반환함. 
  따라서 실제 값이 필요하면 .getAsInt()처럼 메서드를 통해 꺼냄.

3. reduce() 작동 방식
  reduce((i, j) -> i * j)
  첫 호출: i = 2, j = 3 → 반환값 2*3 = 6
  다음 호출: i = 6 (이전 반환값), j = 4 → 반환값 6*4 = 24
