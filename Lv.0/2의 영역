[ 문제 ]
'''
정수 배열 arr가 주어집니다. 
배열 안의 2가 모두 포함된 가장 작은 연속된 부분 배열을 return 하는 solution 함수를 완성해 주세요.
단, arr에 2가 없는 경우 [-1]을 return 합니다.
arr	                    result
[1, 2, 1, 4, 5, 2, 9]	  [2, 1, 4, 5, 2]
'''
//=====================================================================

[ 내 풀이 ]
// 도통 알고리즘을 모르겠어서 알고리즘만 GPT한테 참고해서 풀었는데 한 번에 성공!! 도파민^^d
import java.util.*;
class Solution {
    public int[] solution(int[] arr) {
        int first = -1; // 이렇게 지정하고 시작할 생각을 못했음.
        int last = -1;
        
        // 2 첫 번째 인덱스 저장
        for(int i=0; i<arr.length; i++) {
            if(arr[i] == 2) {
                first = i;
                break;
            }
        }
        
        // 2가 없는 arr
        if(first == -1) {
            return new int[]{-1}; // 즉석에서 배열 만드는 건 이렇게!
        }
        
        // 2 마지막 인덱스 저장
        for(int i=0; i<arr.length; i++) {
            if(arr[i] == 2)
                last = i;
        }
        
        // 해당 인덱스 범위만 출력
        return Arrays.copyOfRange(arr, first, last+1);
    }
}
//=====================================================================

[ 타 풀이 ]
import java.util.stream.IntStream;
class Solution {
    public int[] solution(int[] arr) {
        int[] idxs = IntStream.range(0, arr.length).filter(i -> arr[i] == 2).toArray();

        if(idxs.length == 0) {
            int[] zero = {-1};
            return zero;
        }
        else if(idxs.length == 1) {
            int[] one = {2};
            return one;
        }
        else {
            return IntStream.rangeClosed(idxs[0],idxs[idxs.length-1]).map(i->arr[i]).toArray();
        }
    }
}
// IntStream.rangeClosed(idxs[0],idxs[idxs.length-1]): 2요소 첫 인덱스 ~ 마지막 요소 인덱스 범위의 연속된 정수 스트림 생성
// .map(i->arr[i]): 그 연속된 정수들을 arr[i] 요소들 값으로 하나씩 변경함.
// .toArray(): 스트림을 다시 int[] 배열로 변환
//=====================================================================

[ 메모 ]
1. IntStream.rangeClosed(시작, 끝): 해당 범위 내 연속된 정수 스트림 생성 (끝 범위 포함)
