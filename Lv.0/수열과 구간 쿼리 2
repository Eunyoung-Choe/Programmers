[ 문제 ]
/*
정수 배열 arr와 2차원 정수 배열 queries이 주어집니다. queries의 원소는 각각 하나의 query를 나타내며, [s, e, k] 꼴입니다.
각 query마다 순서대로 s ≤ i ≤ e인 모든 i에 대해 k보다 크면서 가장 작은 arr[i]를 찾습니다.

각 쿼리의 순서에 맞게 답을 저장한 배열을 반환하는 solution 함수를 완성해 주세요.
단, 특정 쿼리의 답이 존재하지 않으면 -1을 저장합니다.

arr	              queries	                          result
[0, 1, 2, 4, 3]	  [[0, 4, 2],[0, 3, 2],[0, 2, 2]]	  [3, 4, -1]

I/O Ex)
첫 번째 쿼리의 범위에는 0, 1, 2, 4, 3이 있으며 이 중 2보다 크면서 가장 작은 값은 3입니다.
두 번째 쿼리의 범위에는 0, 1, 2, 4가 있으며 이 중 2보다 크면서 가장 작은 값은 4입니다.
세 번째 쿼리의 범위에는 0, 1, 2가 있으며 여기에는 2보다 큰 값이 없습니다.
따라서 [3, 4, -1]을 return 합니다.
*/
//=====================================================================

[ 답안 ]
import java.util.*;

class Solution {
    public int[] solution(int[] arr, int[][] q) {          
        List<Integer> result = new ArrayList<>(); // 리턴 대상
        
        for(int i = 0; i < q.length; i++) { 
            int s = q[i][0];
            int e = q[i][1];
            int k = q[i][2];
            
            List<Integer> tempList = new ArrayList<>();
            
            // 해당 범위의 arr 구하기
            for(int j = s; j <= e; j++) {
                if(arr[j] > k) {
                    tempList.add(arr[j]);
                }
            }

            // 조건에 맞는 값이 있다면, 오름차순 정렬 후 가장 작은 값 추가
            if (!tempList.isEmpty()) {
                Collections.sort(tempList);
                result.add(tempList.get(0));  // 가장 작은 값 추가
            } else {
                result.add(-1);  // 조건에 맞는 값이 없으면 -1 추가
            }
        }
        
        // 배열로 변환하여 반환
        int[] answer = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            answer[i] = result.get(i);
        }
        
        return answer;  
    }
}

//=====================================================================

[ 내 오답 풀이 ]
import java.util.*;

class Solution {
    public int[] solution(int[] arr, int[][] q) {          
        List<Integer> result = new ArrayList<>(); // 리턴 대상
        
        for(int i=0; i<q.length; i++) { 
            int s = q[i][0];
            int e = q[i][1];
            int k = q[i][2];

            int tempo[] = new int[e-s+1]; 
            // → 배열에 조건을 만족하는 값이 없으면 모든 값은 0이 됨.
            // → 조건에 맞는 값이 많지 않으면 배열 크기 낭비 가능성 有  ∴ List로 변경

            for(int j=s; j<=e; j++){
                if(arr[j] > k)
                    tempo[j-s] = arr[j]; // → -1 예외 처리 막힘.
            }

            Arrays.sort(tempo); 
            result.add(tempo[0]);
        }
        
        int[] answer = new int[result.size()];
        
        for(int i=0; i<result.size(); i++){
            answer[i] = result.get(i);
        }
        
        return answer;  
    }
}
//=====================================================================

[ 타 풀이 ]
import java.util.stream.IntStream;

class Solution {
    public int[] solution(int[] arr, int[][] queries) {
        int[] answer = {};

        // 각 q에 대해 stream의 각 요소를 변환함. q는 IntStream.range(0, queries.length)에서 반복되는 값임. (=쿼리 인덱스)
        return IntStream.range(0, queries.length)
                .map(q -> IntStream.rangeClosed(queries[q][0], queries[q][1]) 
                        .map(i -> arr[i])
                        .filter(i -> i > queries[q][2])
                        .min().orElse(-1)
                ).toArray();
    }
}
===================================================================

[ 메모 ]
1. Collections.sort()
  : 리스트 정렬

2. 배열의 초기화 기본 값 → 0

3. IntStream.range(start, end)
  : start부터 'end-1'까지의 정수 범위를 생성하는 stream 생성

4. .map()
  : 각 요소를 변환하는 메서드

5. .rangeClosed()
  : start부터 'end'까지의 정수 범위를 생성하는 메서드

6. .filter()
  : 주어진 조건을 만족하는 값만 필터링

7. orElse()
  : 값이 없을 때 지정한 기본값을 반환하도록 설정
